(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{220:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(5),o=n(10),i=(n(2),n(345)),a={id:"require-field",title:"`require` field"},c={unversionedId:"getting-started/require-field",id:"getting-started/require-field",isDocsHomePage:!1,title:"`require` field",description:"The require field allows you to load any external files without the need to transpile them before.",source:"@site/docs/getting-started/require-field.md",slug:"/getting-started/require-field",permalink:"/docs/getting-started/require-field",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/getting-started/require-field.md",version:"current",sidebar:"sidebar",previous:{title:"`config` field",permalink:"/docs/getting-started/config-field"},next:{title:"Lifecycle Hooks",permalink:"/docs/getting-started/lifecycle-hooks"}},l=[{value:"How to use it?",id:"how-to-use-it",children:[]},{value:"TypeScript Support",id:"typescript-support",children:[]},{value:"Specifying from the command line",id:"specifying-from-the-command-line",children:[{value:"<code>dotenv</code> Integration",id:"dotenv-integration",children:[]}]}],p={toc:l};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"require")," field allows you to load any external files without the need to transpile them before."),Object(i.b)("h2",{id:"how-to-use-it"},"How to use it?"),Object(i.b)("p",null,"To use it, install the extensions you wish to use from npm and then specify a list of ",Object(i.b)("inlineCode",{parentName:"p"},"require")," extensions in your root config:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"require:\n  - extension1\n  - extension2\n")),Object(i.b)("p",null,"Adding ",Object(i.b)("inlineCode",{parentName:"p"},"require")," extension is useful if you are loading your ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLSchema")," or GraphQL documents from a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/getting-started/schema-field#javascript-export"}),"code file"),", if you wish to use ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/custom-codegen/write-your-plugin"}),"custom plugins"),", or use a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/getting-started/schema-field#custom-schema-loader"}),"custom schema loader")," or a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/getting-started/documents-field#custom-document-loader"}),"custom document loader"),"."),Object(i.b)("h2",{id:"typescript-support"},"TypeScript Support"),Object(i.b)("p",null,"If you wish to use TypeScript, just add ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/TypeStrong/ts-node"}),Object(i.b)("inlineCode",{parentName:"a"},"ts-node"))," from npm and specify its register export in your config file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"require:\n  - ts-node/register\n")),Object(i.b)("h2",{id:"specifying-from-the-command-line"},"Specifying from the command line"),Object(i.b)("p",null,"You can also specify ",Object(i.b)("inlineCode",{parentName:"p"},"require.extensions")," as a cli flag using ",Object(i.b)("inlineCode",{parentName:"p"},"-r"),"."),Object(i.b)("p",null,"Specifying ",Object(i.b)("inlineCode",{parentName:"p"},"-r")," using a CLI flag will load your ",Object(i.b)("inlineCode",{parentName:"p"},"require.extension")," ",Object(i.b)("em",{parentName:"p"},"before")," loading the ",Object(i.b)("inlineCode",{parentName:"p"},".yml")," file, and this way you can load environment variables using ",Object(i.b)("inlineCode",{parentName:"p"},"dotenv")," and use those environment variables in your ",Object(i.b)("inlineCode",{parentName:"p"},".yml")," config file."),Object(i.b)("h3",{id:"dotenv-integration"},Object(i.b)("inlineCode",{parentName:"h3"},"dotenv")," Integration"),Object(i.b)("p",null,"If you wish to use ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/motdotla/dotenv"}),"dotenv")," to load environment variables, you can install ",Object(i.b)("inlineCode",{parentName:"p"},"dotenv")," from npm and then to use the ",Object(i.b)("inlineCode",{parentName:"p"},"require")," cli flag to preload the ",Object(i.b)("inlineCode",{parentName:"p"},"dotenv")," require extensions: ",Object(i.b)("inlineCode",{parentName:"p"},"-r dotenv/config"),"."),Object(i.b)("p",null,"It will make sure to load your ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file before executing the codegen and loading your ",Object(i.b)("inlineCode",{parentName:"p"},".yml")," file, so environment variables that are used in your config file will be replaced with the correct value."),Object(i.b)("p",null,"To get started with this integration, make sure you have ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file with variables, ",Object(i.b)("inlineCode",{parentName:"p"},"dotenv")," installed, and codegen is being executed like that:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"graphql-codegen --require dotenv/config --config codegen.yml\n")),Object(i.b)("h4",{id:"customize-loaded-env-file"},"Customize loaded env file"),Object(i.b)("p",null,"If you wish to load a file different than ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file, please follow ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/motdotla/dotenv#dotenv"}),Object(i.b)("inlineCode",{parentName:"a"},"dotenv")," library documentation"),"."),Object(i.b)("p",null,"It allows you to specify a custom file path using 2 methods."),Object(i.b)("p",null,"You can either set an environment variable called ",Object(i.b)("inlineCode",{parentName:"p"},"DOTENV_CONFIG_PATH")," with the path:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'DOTENV_CONFIG_PATH="./my.env" graphql-codegen --require dotenv/config --config codegen.yml\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: You can use ",Object(i.b)("inlineCode",{parentName:"p"},"cross-env")," library if you are using Windows.")),Object(i.b)("p",null,"Or, you can specify it using codegen cli, like that:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"graphql-codegen --require dotenv/config --config codegen.yml dotenv_config_path=my.env\n")),Object(i.b)("h4",{id:"dotenv-example"},Object(i.b)("inlineCode",{parentName:"h4"},"dotenv")," Example"),Object(i.b)("p",null,".env:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"SCHEMAURL=https://example.com/graphql\nAPIKEY=ABC123\n")),Object(i.b)("p",null,"codegen.yml:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"schema: \n  - ${SCHEMAURL}:\n    headers:\n      apikey: ${APIKEY}\n  \n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: The env values might be saved in the generated code output.  Be careful not to commit code with sensitive keys.")))}b.isMDXComponent=!0},345:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(2),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),b=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=b(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(n),s=r,m=d["".concat(a,".").concat(s)]||d[s]||u[s]||i;return n?o.a.createElement(m,c(c({ref:t},p),{},{components:n})):o.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);